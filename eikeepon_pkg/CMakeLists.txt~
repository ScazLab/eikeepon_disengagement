cmake_minimum_required(VERSION 2.8.3)
project(eikeepon_pkg)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
##find_package(OpenCV REQUIRED COMPONENTS
##  opencv_core
##  opencv_highgui
##  opencv_imgproc
##  opencv_objdetect)
find_package(catkin REQUIRED COMPONENTS
  rospy
  roscpp
  std_msgs
  message_generation
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

#######################################
## Declare ROS messages and services ##
#######################################

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  OmronMsg.msg
  ControllerMsg.msg
  FaceDetectorMsg.msg
  ControllerBehaviorMsg.msg
  LogMsg.msg
  DisFeaturesMsg.msg
  RobotFeaturesMsg.msg
  DisengagementPrediction.msg
)

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )

generate_messages()
# rosbuild_genmsg()

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES mykeepon_museum
  CATKIN_DEPENDS rospy message_runtime
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)

## Set up Omron directory
##set(OMRON_INCLUDE_PATH "${CMAKE_SOURCE_DIR}/mykeepon_museum/src/omron/include/")

##set(OMRON_LIB_PATH "${CMAKE_SOURCE_DIR}/mykeepon_museum/src/omron/lib/")

##set(OMRON_SRC_PATH "${CMAKE_SOURCE_DIR}/mykeepon_museum/src/omron/code/")

# add Omron include path
include_directories(
  ${catkin_INCLUDE_DIRS} ##${OpenCV_INCLUDE_DIRS} ${OMRON_INCLUDE_PATH}
)

## Declare a cpp library
# add_library(mykeepon_museum
#   src/${PROJECT_NAME}/mykeepon_museum.cpp
# )

## Declare a cpp executable

# add Omron executable
##add_executable(omron 
##${OMRON_SRC_PATH}main.cpp 
##${OMRON_SRC_PATH}DrawResult.cpp 
##${OMRON_SRC_PATH}GazeProc.cpp 
##${OMRON_SRC_PATH}OmronFunc.cpp 
##${OMRON_SRC_PATH}PointTrans.cpp 
##${OMRON_SRC_PATH}WriteResult.cpp 
##${OMRON_SRC_PATH}OkaoTimeDummy.c
##)

# add Omron link libraries
##target_link_libraries(omron ${catkin_LIBRARIES} ${OpenCV_LIBRARIES} 
##${OMRON_LIB_PATH}eOkaoSm.a ${OMRON_LIB_PATH}eOkaoPc.a 
##${OMRON_LIB_PATH}eOkaoGb.a ${OMRON_LIB_PATH}eOkaoPt.a 
##${OMRON_LIB_PATH}eOkaoDt.a ${OMRON_LIB_PATH}eOkaoCo.a 
##${OMRON_LIB_PATH}libhasp_linux.a
##)

##add_dependencies(omron mykeepon_museum_generate_message_cpp)

# add_executable(mykeepon_museum_node src/mykeepon_museum_node.cpp)

##add_executable(FaceDetector_OpenCV src/FaceDetector_OpenCV.cpp)
##target_link_libraries(FaceDetector_OpenCV ${catkin_LIBRARIES} ${OpenCV_LIBRARIES} ${OpenCV_LIBS})
##add_dependencies(FaceDetector_OpenCV mykeepon_museum_generate_message_cpp)

##add_executable(facedetect src/MainProgram.cpp src/CropImage.cpp src/FaceDetection.cpp src/TemplateMatch.cpp src/Text.cpp src/main.cpp)
##target_link_libraries(facedetect ${catkin_LIBRARIES} ${OpenCV_LIBRARIES} ${OpenCV_LIBS})
##add_dependencies(facedetect mykeepon_museum_generate_message_cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(mykeepon_museum_node mykeepon_museum_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(mykeepon_museum_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS mykeepon_museum mykeepon_museum_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_mykeepon_museum.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
